{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOXDDkwCmBYZPRQy5CFZvRC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VinniArst/Tugas-Machine-learning/blob/main/Week%202%20Machine%20Learning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1vyNau-5wUd3"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ohXWE0VSwjpp",
        "outputId": "638d83ce-6902-480b-abd3-7e4e815dfb05"
      },
      "source": [
        "!pip install -U scikit-learn"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (1.0.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (3.0.0)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.19.5)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rbKStq6ewpiI",
        "outputId": "38bd3612-03f5-43a3-ed18-ddbe1ff5e49a"
      },
      "source": [
        "from sklearn import linear_model\n",
        "from sklearn import linear_model as linear\n",
        "reg = linear.LinearRegression()\n",
        "reg.fit([[0, 0], [1, 1], [2, 2]], [0, 1, 2])\n",
        "reg.coef_"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5, 0.5])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MJ2wYQmcxZs4"
      },
      "source": [
        "**Contoh Linear Regretion**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "OGC2Vpg-xg2k",
        "outputId": "19bc75a1-0b8f-4b7b-bc35-3350abe5eb89"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "#Load the diabetes dataset\n",
        "diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n",
        "\n",
        "#Use only one feature\n",
        "diabetes_X = diabetes_X[:, np.newaxis, 2]\n",
        "\n",
        "#Split the data into training/testing sets\n",
        "diabetes_X_train = diabetes_X[:-20]\n",
        "diabetes_X_test = diabetes_X[-20:]\n",
        "\n",
        "#Split the targets into training/testing sets\n",
        "diabetes_y_train = diabetes_y[:-20]\n",
        "diabetes_y_test = diabetes_y[-20:]\n",
        "\n",
        "#Create linear regression object\n",
        "regr = linear_model.LinearRegression()\n",
        "\n",
        "#Train the model using the training sets\n",
        "regr.fit(diabetes_X_train, diabetes_y_train)\n",
        "\n",
        "#Make predictions using the testing set\n",
        "diabetes_y_pred = regr.predict(diabetes_X_test)\n",
        "\n",
        "#The coefficients\n",
        "print(\"Coefficients: \\n\", regr.coef_)\n",
        "#The mean squared error\n",
        "print(\"Mean squared error: %.2f\" %mean_squared_error(diabetes_y_test, diabetes_y_pred))\n",
        "#The coefficient of determination: 1 is perfect prediction\n",
        "print(\"Coefficient of Determination: %.2f\" % r2_score(diabetes_y_test, diabetes_y_pred))\n",
        "\n",
        "#Plot outputs\n",
        "plt.scatter(diabetes_X_test, diabetes_y_test, color=\"red\")\n",
        "plt.plot(diabetes_X_test, diabetes_y_pred, color=\"black\", linewidth=3)\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: \n",
            " [938.23786125]\n",
            "Mean squared error: 2548.07\n",
            "Coefficient of Determination: 0.47\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WcT_5Kyf2R43"
      },
      "source": [
        "**Non-negative least squares**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YYvCrJz31X63"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import r2_score"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WupyzO-x2l26"
      },
      "source": [
        "np.random.seed(42)\n",
        "\n",
        "n_samples, n_features = 200, 50\n",
        "X = np.random.randn(n_samples, n_features)\n",
        "true_coef = 3 * np.random.randn(n_features)\n",
        "# Threshold coefficients to render them non-negative\n",
        "true_coef[true_coef < 0] = 0\n",
        "y = np.dot(X, true_coef)\n",
        "\n",
        "# Add some noise\n",
        "y += 5 * np.random.normal(size=(n_samples,))"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PcYqinI44JGl"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GVgGu90V4LkM",
        "outputId": "98208b4a-fef1-4c57-dac2-aa541f6ca521",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "reg_nnls = LinearRegression(positive=True)\n",
        "y_pred_nnls = reg_nnls.fit(X_train, y_train).predict(X_test)\n",
        "r2_score_nnls = r2_score(y_test, y_pred_nnls)\n",
        "print(\"NNLS R2 Score\", r2_score_nnls)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NNLS R2 Score 0.817343329331002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bTUILond5Y3F",
        "outputId": "5f16989b-1ebe-4ea8-a3f4-e495b1ff9d75",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "reg_ols = LinearRegression()\n",
        "y_pred_ols = reg_ols.fit(X_train, y_train).predict(X_test)\n",
        "r2_score_ols = r2_score(y_test, y_pred_ols)\n",
        "print(\"OLS R2 Score\", r2_score_ols)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OLS R2 Score 0.7840882510156991\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XYMQxGaz5eLc",
        "outputId": "a5cacaff-1a7c-4f2c-b397-784ce6adac6e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "fig, ax = plt.subplots()\n",
        "ax.plot(reg_ols.coef_, reg_nnls.coef_, linewidth=0, marker=\".\")\n",
        "\n",
        "low_x, high_x = ax.get_xlim()\n",
        "low_y, high_y = ax.get_ylim()\n",
        "low = max(low_x, low_y)\n",
        "high = min(high_x, high_y)\n",
        "ax.plot([low, high], [low, high], ls=\"--\", c=\".3\", alpha=0.5)\n",
        "ax.set_xlabel(\"OLS Regression Coefficients\", fontweight=\"bold\")\n",
        "ax.set_ylabel(\"NNLS Regression Coefficients\", fontweight=\"bold\")"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'NNLS Regression Coefficients')"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Uv0bkFb5rBs",
        "outputId": "14ee5be6-0d39-4410-a340-1a7ac45d9492",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import logging\n",
        "import numpy as np\n",
        "from optparse import OptionParser\n",
        "import sys\n",
        "from time import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.feature_extraction.text import HashingVectorizer\n",
        "from sklearn.feature_selection import SelectFromModel\n",
        "from sklearn.feature_selection import SelectKBest, chi2\n",
        "from sklearn.linear_model import RidgeClassifier\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.linear_model import Perceptron\n",
        "from sklearn.linear_model import PassiveAggressiveClassifier\n",
        "from sklearn.naive_bayes import BernoulliNB, ComplementNB, MultinomialNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.neighbors import NearestCentroid\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.utils.extmath import density\n",
        "from sklearn import metrics\n",
        "\n",
        "\n",
        "# Display progress logs on stdout\n",
        "logging.basicConfig(level=logging.INFO, format=\"%(asctime)s %(levelname)s %(message)s\")\n",
        "\n",
        "op = OptionParser()\n",
        "op.add_option(\n",
        "    \"--report\",\n",
        "    action=\"store_true\",\n",
        "    dest=\"print_report\",\n",
        "    help=\"Print a detailed classification report.\",\n",
        ")\n",
        "op.add_option(\n",
        "    \"--chi2_select\",\n",
        "    action=\"store\",\n",
        "    type=\"int\",\n",
        "    dest=\"select_chi2\",\n",
        "    help=\"Select some number of features using a chi-squared test\",\n",
        ")\n",
        "op.add_option(\n",
        "    \"--confusion_matrix\",\n",
        "    action=\"store_true\",\n",
        "    dest=\"print_cm\",\n",
        "    help=\"Print the confusion matrix.\",\n",
        ")\n",
        "op.add_option(\n",
        "    \"--top10\",\n",
        "    action=\"store_true\",\n",
        "    dest=\"print_top10\",\n",
        "    help=\"Print ten most discriminative terms per class for every classifier.\",\n",
        ")\n",
        "op.add_option(\n",
        "    \"--all_categories\",\n",
        "    action=\"store_true\",\n",
        "    dest=\"all_categories\",\n",
        "    help=\"Whether to use all categories or not.\",\n",
        ")\n",
        "op.add_option(\"--use_hashing\", action=\"store_true\", help=\"Use a hashing vectorizer.\")\n",
        "op.add_option(\n",
        "    \"--n_features\",\n",
        "    action=\"store\",\n",
        "    type=int,\n",
        "    default=2 ** 16,\n",
        "    help=\"n_features when using the hashing vectorizer.\",\n",
        ")\n",
        "op.add_option(\n",
        "    \"--filtered\",\n",
        "    action=\"store_true\",\n",
        "    help=(\n",
        "        \"Remove newsgroup information that is easily overfit: \"\n",
        "        \"headers, signatures, and quoting.\"\n",
        "    ),\n",
        ")\n",
        "\n",
        "\n",
        "def is_interactive():\n",
        "    return not hasattr(sys.modules[\"__main__\"], \"__file__\")\n",
        "\n",
        "\n",
        "# work-around for Jupyter notebook and IPython console\n",
        "argv = [] if is_interactive() else sys.argv[1:]\n",
        "(opts, args) = op.parse_args(argv)\n",
        "if len(args) > 0:\n",
        "    op.error(\"this script takes no arguments.\")\n",
        "    sys.exit(1)\n",
        "\n",
        "print(__doc__)\n",
        "op.print_help()\n",
        "print()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Automatically created module for IPython interactive environment\n",
            "Usage: ipykernel_launcher.py [options]\n",
            "\n",
            "Options:\n",
            "  -h, --help            show this help message and exit\n",
            "  --report              Print a detailed classification report.\n",
            "  --chi2_select=SELECT_CHI2\n",
            "                        Select some number of features using a chi-squared\n",
            "                        test\n",
            "  --confusion_matrix    Print the confusion matrix.\n",
            "  --top10               Print ten most discriminative terms per class for\n",
            "                        every classifier.\n",
            "  --all_categories      Whether to use all categories or not.\n",
            "  --use_hashing         Use a hashing vectorizer.\n",
            "  --n_features=N_FEATURES\n",
            "                        n_features when using the hashing vectorizer.\n",
            "  --filtered            Remove newsgroup information that is easily overfit:\n",
            "                        headers, signatures, and quoting.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XSRoOhth5z18",
        "outputId": "1d63b121-8a80-4b3f-d689-b3ca4ed261ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        }
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# Generate some sparse data to play with\n",
        "np.random.seed(42)\n",
        "\n",
        "n_samples, n_features = 50, 100\n",
        "X = np.random.randn(n_samples, n_features)\n",
        "\n",
        "# Decreasing coef w. alternated signs for visualization\n",
        "idx = np.arange(n_features)\n",
        "coef = (-1) ** idx * np.exp(-idx / 10)\n",
        "coef[10:] = 0  # sparsify coef\n",
        "y = np.dot(X, coef)\n",
        "\n",
        "# Add noise\n",
        "y += 0.01 * np.random.normal(size=n_samples)\n",
        "\n",
        "# Split data in train set and test set\n",
        "n_samples = X.shape[0]\n",
        "X_train, y_train = X[: n_samples // 2], y[: n_samples // 2]\n",
        "X_test, y_test = X[n_samples // 2 :], y[n_samples // 2 :]\n",
        "\n",
        "\n",
        "# Lasso\n",
        "from sklearn.linear_model import Lasso\n",
        "\n",
        "alpha = 0.1\n",
        "lasso = Lasso(alpha=alpha)\n",
        "\n",
        "y_pred_lasso = lasso.fit(X_train, y_train).predict(X_test)\n",
        "r2_score_lasso = r2_score(y_test, y_pred_lasso)\n",
        "print(lasso)\n",
        "print(\"r^2 on test data : %f\" % r2_score_lasso)\n",
        "\n",
        "\n",
        "# ElasticNet\n",
        "from sklearn.linear_model import ElasticNet\n",
        "\n",
        "enet = ElasticNet(alpha=alpha, l1_ratio=0.7)\n",
        "\n",
        "y_pred_enet = enet.fit(X_train, y_train).predict(X_test)\n",
        "r2_score_enet = r2_score(y_test, y_pred_enet)\n",
        "print(enet)\n",
        "print(\"r^2 on test data : %f\" % r2_score_enet)\n",
        "\n",
        "m, s, _ = plt.stem(\n",
        "    np.where(enet.coef_)[0],\n",
        "    enet.coef_[enet.coef_ != 0],\n",
        "    markerfmt=\"x\",\n",
        "    label=\"Elastic net coefficients\",\n",
        "    use_line_collection=True,\n",
        ")\n",
        "plt.setp([m, s], color=\"#2ca02c\")\n",
        "m, s, _ = plt.stem(\n",
        "    np.where(lasso.coef_)[0],\n",
        "    lasso.coef_[lasso.coef_ != 0],\n",
        "    markerfmt=\"x\",\n",
        "    label=\"Lasso coefficients\",\n",
        "    use_line_collection=True,\n",
        ")\n",
        "plt.setp([m, s], color=\"#ff7f0e\")\n",
        "plt.stem(\n",
        "    np.where(coef)[0],\n",
        "    coef[coef != 0],\n",
        "    label=\"true coefficients\",\n",
        "    markerfmt=\"bx\",\n",
        "    use_line_collection=True,\n",
        ")\n",
        "\n",
        "plt.legend(loc=\"best\")\n",
        "plt.title(\n",
        "    \"Lasso $R^2$: %.3f, Elastic Net $R^2$: %.3f\" % (r2_score_lasso, r2_score_enet)\n",
        ")\n",
        "plt.show()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lasso(alpha=0.1)\n",
            "r^2 on test data : 0.658064\n",
            "ElasticNet(alpha=0.1, l1_ratio=0.7)\n",
            "r^2 on test data : 0.642515\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}